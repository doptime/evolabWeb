package projects

import (
	"context"
	"fmt"
	"text/template"

	"github.com/doptime/eloevo/agent"
	"github.com/doptime/eloevo/elo"
	"github.com/doptime/eloevo/mixincached"
	"github.com/doptime/eloevo/models"
	"github.com/doptime/eloevo/prototype"
	"github.com/doptime/eloevo/tool"
	"github.com/doptime/redisdb"
	"github.com/samber/lo"
)

// {"Id":"H3URX2jY","BusinessClusters":{"AI-Driven Public Policy Analysis":2500,"AI-Driven Fashion & Wearable Tech":5200,"AI in Public Services & Governance":2500,"Advanced Materials & Nanotechnology":24000,"Virtual & Digital Asset Management":15200,"AI-Driven Customer Experience":6200,"AI-Driven Agricultural & Farm Management":16100,"AI in Waste Management & Circular Economy":45000,"Green Energy & Renewable Tech":124000,"AI-Driven Tourism & Hospitality":5500,"AI-Driven Automotive & Mobility Solutions":6800,"AI in Disaster Management & Safety":2500,"AI-Driven Supply Chain & Inventory Optimization":7500,"AI-Driven Urban Planning & Development":5000,"AI in Climate & Environmental Science":124000,"AI in Energy & Utilities":124000,"AI-Driven Analytics & Big Data":22500,"AI-Driven Real Estate & Architecture":9100,"AI-Driven Fraud Detection & Compliance":7300,"AI Core Technologies":45000,"AI in Agriculture & Food Tech":16100,"Extended Reality (XR) & Virtual Worlds":9800,"Health Informatics & Telemedicine":41000,"AI in Legal & Compliance":11100,"AI in Telecommunications & Networks":9900,"Digital Payment Systems & Fintech":89000,"AI-Driven Cultural & Heritage Preservation":3600,"AI in Media & Entertainment":2000,"Smart Manufacturing & Industry 4.0":34000,"Space Commerce & Satellite Tech":10500,"AI-Driven Risk Management & Insurance":4800,"AI-Driven Legal Document Analysis":7900,"AI-Driven Journalism & Media Analysis":3200,"AI in Manufacturing & Industry 4.0":34000,"AI in Marketing & Advertising":6200,"AI in Blockchain & Digital Assets":94100,"Neural Interfaces & Bioelectronics":9300,"Smart Home & IoT Solutions":5800,"AI in Education & EdTech":21000,"AI-Driven Personalized Learning":21000,"AI-Driven Sports & Fitness Tech":5200,"AI-Driven Public Safety & Defense Systems":2500,"AI in Water & Environmental Tech":6500,"AI-Driven Mining & Resources":9200,"AI-Driven Disaster Response Systems":2500,"AI-Driven Security & Surveillance Systems":2500,"AI in Transportation & Logistics":15000,"Drone & Autonomous Systems":38000,"Smart Agriculture & Farming Tech":16500,"Smart Transportation & Urban Mobility":13300,"AI-Driven Media & Content Creation":3200,"Quantum Computing & Sensing":10000,"Smart Energy & Grid Management":9900,"Synthetic Biology & Bioengineering":6700,"AI-Driven Public Infrastructure Management":8900,"AI in Retail & E-commerce":15000,"AI in Cultural Preservation & Heritage":3600,"AI in Robotics & Automation":42000,"Hydrogen & Clean Energy Solutions":34200,"AI-Driven Telecom & Network Optimization":9900,"AI-Driven Customer Support & Chatbots":5800,"AI in Healthcare & Biotech":45000,"AI in Smart Cities & Urban Tech":27500,"Cybersecurity Infrastructure & Quantum Security":38000,"AI-Driven Virtual Asset Trading":15200,"AI-Driven Climate & Environmental Modeling":7200,"AI in Finance & Banking":22500,"AI in Cybersecurity & Digital Defense":38000,"Biotech & Medical Innovations":54000,"AI-Driven Emergency Response":2500,"AI-Driven Energy Efficiency Solutions":9500}}
type BusinessClustering struct {
	Id               string             `description:"Id, string, unique"`
	BusinessClusters map[string]float64 `description:"BusinessClusters,map, with key the name of the business and value the market size"`
}

func (u *BusinessClustering) GetId() string {
	return u.Id
}
func (u *BusinessClustering) Elo(delta ...int) int {
	var eloDelta int = append(delta, 0)[0]
	return mixincached.WithElo("projects", "BusinessClustering", 1000).Elo(u.Id, float64(eloDelta))
}

var keyBusinessClustering = redisdb.HashKey[string, *BusinessClustering](redisdb.WithRds("projects"))

// 为什么Qwen能自我改进推理，Llama却不行 https://mp.weixin.qq.com/s/OvS61OrDp6rB-R5ELg48Aw
// 并且每次就一个确切的改进方向进行深度分析，反代的深度分析第一性原理之上的需求，深度创新以做出实质的改进。要痛恨泛泛而谈的内容，重复空洞的内容，因为现在是在开发世界级的工具。
var AgentBusinessClustering = agent.NewAgent(template.Must(template.New("utilifyFunction").Parse(`
现在我们要对世界上的商业活动进行分类。注意，现在是创建商业活动类目。并不是创建具体的商业活动。
我们的目标是把商业活动分成大约64大类。不要关心类目的具体数量。要关注类目的分布的覆盖性。

这是现有的方案 ：
{{range  $index, $item := .ItemList}}
第{{$index}}个方案：
Id:{{$item.Id}}
BusinessClusters:{{range $key, $value := $item.BusinessClusters}}
{{$key}}:{{$value}}{{end}}
{{end}}

ToDo:
步骤1. 对现有的选项进行思考和评估：
	1、对回溯或在检测到错误进行显式修改（例如，「这种方法行不通，因为...」）；
	2、验证或系统地检查中间结果（例如，「让我们通过... 来验证这个结果」）；
	3、子目标设定，即将复杂问题分解为可管理的步骤（例如，「要解决这个问题，我们首先需要...」）；
	4、逆向思考，即在目标导向的推理问题中，从期望的结果出发，逐步向后推导，找到解决问题的路径。（例如，「要达到 75 的目标，我们需要一个能被... 整除的数字」）。
{{if gt .TotoalNodes 9}}
步骤2. 根据上面的讨论. 将现有方案选项从最好到最坏排序(用Id列表表示)。调用FunctionCall:SaveItemsSorted 保存排序结果。
{{end}}

{{if lt .TotoalNodes 10}}
步骤3. 在讨论的基础上，进一步提出一个更好的，新的方案草稿。对草稿同样按步骤1改进后，调用FunctionCall:BusinessClustering 保存新的方案。
{{end}}
`))).WithToolCallLocked().WithTools(tool.NewTool("SaveItemsSorted", "Save sorted Items, Items represented as Id list.", func(model *prototype.ItemsSorted) {
	if model == nil || len(model.ItemsRefById) == 0 {
		return
	}
	all, _ := keyBusinessClustering.HGetAll()
	sortedElos := elo.ToSlice(all).Sort().Reverse()
	elo.BatchUpdateRanking(sortedElos.TakeByIds(model.ItemsRefById...)...)
	//remove the worst 2
	for _, v := range lo.Filter(sortedElos, func(v elo.Elo, i int) bool { return v.Elo() < 996 }) {
		keyBusinessClustering.ConcatKey("Expired").HSet(v.GetId(), v)
		keyBusinessClustering.HDel(v.GetId())
	}
	for i, v := range sortedElos[0:min(10, len(sortedElos))] {
		fmt.Println("Best Model,top ", i+1, v.GetId(), "Elo", v.Elo())
	}

})).WithTools(tool.NewTool("NewBusinessClustering", "create a new NewBusinessClustering plan", func(model *BusinessClustering) {
	model.Id = redisdb.NanoId(8)
	keyBusinessClustering.HSet(model.Id, model)
}))

func BusinessClusteringExploration() {
	var businessCluster = map[string]uint{
		"AI-Driven Public Policy Analysis":                2500,
		"AI-Driven Fashion & Wearable Tech":               5200,
		"AI in Public Services & Governance":              2500,
		"Advanced Materials & Nanotechnology":             24000,
		"Virtual & Digital Asset Management":              15200,
		"AI-Driven Customer Experience":                   6200,
		"AI-Driven Agricultural & Farm Management":        16100,
		"AI in Waste Management & Circular Economy":       45000,
		"Green Energy & Renewable Tech":                   124000,
		"AI-Driven Tourism & Hospitality":                 5500,
		"AI-Driven Automotive & Mobility Solutions":       6800,
		"AI in Disaster Management & Safety":              2500,
		"AI-Driven Supply Chain & Inventory Optimization": 7500,
		"AI-Driven Urban Planning & Development":          5000,
		"AI in Climate & Environmental Science":           124000,
		"AI in Energy & Utilities":                        124000,
		"AI-Driven Analytics & Big Data":                  22500,
		"AI-Driven Real Estate & Architecture":            9100,
		"AI-Driven Fraud Detection & Compliance":          7300,
		"AI Core Technologies":                            45000,
		"AI in Agriculture & Food Tech":                   16100,
		"Extended Reality (XR) & Virtual Worlds":          9800,
		"Health Informatics & Telemedicine":               41000,
		"AI in Legal & Compliance":                        11100,
		"AI in Telecommunications & Networks":             9900,
		"Digital Payment Systems & Fintech":               89000,
		"AI-Driven Cultural & Heritage Preservation":      3600,
		"AI in Media & Entertainment":                     2000,
		"Smart Manufacturing & Industry 4.0":              34000,
		"Space Commerce & Satellite Tech":                 10500,
		"AI-Driven Risk Management & Insurance":           4800,
		"AI-Driven Legal Document Analysis":               7900,
		"AI-Driven Journalism & Media Analysis":           3200,
		"AI in Manufacturing & Industry 4.0":              34000,
		"AI in Marketing & Advertising":                   6200,
		"AI in Blockchain & Digital Assets":               94100,
		"Neural Interfaces & Bioelectronics":              9300,
		"Smart Home & IoT Solutions":                      5800,
		"AI in Education & EdTech":                        21000,
		"AI-Driven Personalized Learning":                 21000,
		"AI-Driven Sports & Fitness Tech":                 5200,
		"AI-Driven Public Safety & Defense Systems":       2500,
		"AI in Water & Environmental Tech":                6500,
		"AI-Driven Mining & Resources":                    9200,
		"AI-Driven Disaster Response Systems":             2500,
		"AI-Driven Security & Surveillance Systems":       2500,
		"AI in Transportation & Logistics":                15000,
		"Drone & Autonomous Systems":                      38000,
		"Smart Agriculture & Farming Tech":                16500,
		"Smart Transportation & Urban Mobility":           13300,
		"AI-Driven Media & Content Creation":              3200,
		"Quantum Computing & Sensing":                     10000,
		"Smart Energy & Grid Management":                  9900,
		"Synthetic Biology & Bioengineering":              6700,
		"AI-Driven Public Infrastructure Management":      8900,
		"AI in Retail & E-commerce":                       15000,
		"AI in Cultural Preservation & Heritage":          3600,
		"AI in Robotics & Automation":                     42000,
		"Hydrogen & Clean Energy Solutions":               34200,
		"AI-Driven Telecom & Network Optimization":        9900,
		"AI-Driven Customer Support & Chatbots":           5800,
		"AI in Healthcare & Biotech":                      45000,
		"AI in Smart Cities & Urban Tech":                 27500,
		"Cybersecurity Infrastructure & Quantum Security": 38000,
		"AI-Driven Virtual Asset Trading":                 15200,
		"AI-Driven Climate & Environmental Modeling":      7200,
		"AI in Finance & Banking":                         22500,
		"AI in Cybersecurity & Digital Defense":           38000,
		"Biotech & Medical Innovations":                   54000,
		"AI-Driven Emergency Response":                    2500,
		"AI-Driven Energy Efficiency Solutions":           9500,
	}
	const MaxThreads = 12
	MaxThreadsSemaphore := make(chan struct{}, MaxThreads)

	for i, TotalTasks := 0, 1000*1000; i < TotalTasks; i++ {
		MaxThreadsSemaphore <- struct{}{} // Acquire a spot in the semaphore
		go func() {
			defer func() { <-MaxThreadsSemaphore }()
			best, _ := keyBusinessClustering.HGetAll()
			//put new nodes to the top
			NodesWithPriority := lo.Filter(lo.Values(best), func(v *BusinessClustering, i int) bool {
				return v.Elo() > 996 && v.Elo() < 1004
			})
			selected := lo.Union(NodesWithPriority, lo.Values(best))
			lo.Shuffle(selected[len(NodesWithPriority):])
			param := map[string]any{
				"ItemList": selected[:min(6, len(selected))],
				//[]*models.Model{models.FuseO1, models.DeepSeekR132B}[i%2],
				"Model":       []*models.Model{models.FuseO1, models.DeepSeekR132B}[i%2],
				"TotoalNodes": len(best),
			}
			err := AgentBusinessClustering.Call(context.Background(), param)
			if err != nil {
				fmt.Printf("Agent call failed: %v\n", err)
			}
		}()
	}
	// Wait for all the goroutines to finish)
	for i := 0; i < MaxThreads; i++ {
		MaxThreadsSemaphore <- struct{}{}
	}

}
